<?xml version="1.0" ?>
<sdf version='1.5'>
<!-- Important Note about Units
     Gazebo uses metric units so distance is assumed to be in meters
     and angles are all in radians -->
  <model name='px4ir_sensors'>
     <include>
     <!--Choose what base quad to add sensor suite to, iris and derivatives should work ie Iris and px4ir-->
      <uri>model://px4ir_no_gps</uri>
    </include>

 <!-- To add a new sensor add a new model and then link it to the base with a joint
      This model can be added below using the explicit definitions or using a uri like the import of the base copter-->

 <!-- Plugin definitions are either in sitl_gazebo/src for the custom, PX4, and modified RotorS plugins these tend to be UAV specific-->
 <!-- Base gazebo plugin source are either in gazebo_ros_pkgs-->

 <!--From fpv_cam.sdf-->
 <model name='baslar_cam'>
      <pose>0 0 -.04 0  1.57 0</pose>
      <link name='link'>
        <inertial>
          <mass>0.015</mass>
          <inertia>
            <ixx>4.15e-6</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>2.407e-6</iyy>
          <iyz>0</iyz>
          <izz>2.407e-6</izz>
          </inertia>
        </inertial>
        <collision name='collision'>
          <geometry>
            <box>
              <size>0 0 0</size>
            </box>
          </geometry>
          <max_contacts>10</max_contacts>
          <surface>
            <contact>
              <ode/>
            </contact>
            <bounce/>
            <friction>
              <ode/>
            </friction>
          </surface>
        </collision>
        <visual name='visual'>
          <geometry>
            <box>
              <size>0.01 0.01 0.01</size>
            </box>
          </geometry>
        </visual>
        <sensor name='camera' type='camera'>
          <camera name='__default__'>
          <!--https://www.baslerweb.com/fp-1574118552/media/downloads/documents/accessories_datasheets/lenses/DG00211003000_Tech_Spec_for_SAP_2000036060_2000036061.pdf-->
          <!--https://www.baslerweb.com/en/products/cameras/area-scan-cameras/dart/daa1280-54um-s-mount/-->
            <horizontal_fov>2.26893</horizontal_fov>
            <image>
              <width>1280</width>
              <height>960</height>
            </image>
            <clip>
              <near>0.01</near>
              <far>100</far>
            </clip>
            <lens>
              <type>custom</type>
              <custom_function>
                <c1>1.05</c1>
                <c2>4</c2>
                <f>1</f>
                <fun>tan</fun>
              </custom_function>
              <scale_to_hfov>1</scale_to_hfov>
              <cutoff_angle>3.1415</cutoff_angle>
              <env_texture_size>1080</env_texture_size>
            </lens>
          </camera>
          <always_on>1</always_on>
          <!--FPS or HZ -->
          <update_rate>60</update_rate>
          <visualize>1</visualize>
          <plugin name='camera_plugin' filename='libgazebo_ros_camera.so'>
            <robotNamespace></robotNamespace>
            <alwaysOn>true</alwaysOn>
            <imageTopicName>image_raw</imageTopicName>
            <cameraInfoTopicName>camera_info</cameraInfoTopicName>
            <updateRate>30.0</updateRate>
            <cameraName>baslar_cam</cameraName>
            <frameName>baslar_cam_link</frameName>
            <CxPrime>320.5</CxPrime>
            <Cx>320.5</Cx>
            <Cy>240.5</Cy>
            <hackBaseline>0</hackBaseline>
            <focalLength>298.436133</focalLength>
            <distortionK1>0.0</distortionK1>
            <distortionK2>0.0</distortionK2>
            <distortionK3>0.0</distortionK3>
            <distortionT1>0.0</distortionT1>
            <distortionT2>0.0</distortionT2>
          </plugin>
        </sensor>
        <self_collide>0</self_collide>
        <kinematic>0</kinematic>
      </link>
  </model>

  <joint name="downward_cam_joint" type="fixed">
    <child>baslar_cam::link</child>
    <parent>px4ir::base_link</parent>
    <axis>
      <xyz>0 0 1</xyz>
      <limit>
        <upper>0</upper>
        <lower>0</lower>
      </limit>
    </axis>
  </joint>

  <model name="realsense_cam">
    <pose>0.1 0 0 0 0 0</pose>
    <link name="link">
      <inertial>
        <pose>0.01 0.025 0.025 0 0 0</pose>
        <mass>0.01</mass>
        <inertia>
          <ixx>4.15e-6</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>2.407e-6</iyy>
          <iyz>0</iyz>
          <izz>2.407e-6</izz>
        </inertia>
      </inertial>
      <visual name="visual">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://realsense_camera/meshes/realsense.dae</uri>
          </mesh>
        </geometry>
      </visual>
      <sensor name="depth_camera" type="depth">
        <update_rate>60</update_rate>
        <camera>
          <horizontal_fov>1.51844</horizontal_fov>
          <image>
            <format>RGB_INT8</format>
            <width>640</width>
            <height>480</height>
          </image>
          <clip>
            <near>0.105</near>
            <far>12</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.000</stddev>
          </noise>
        </camera>
        <!-- This depth camera plugin was choosen in hopes of being lighter weight, rather then simulating 3 cameras like the plugin below
             It puts out point cloud data and RGBD that is similar to the real realsense d435 -->
        <!-- If you need infrared cameras or something similar to the realsense check out this plugin
             https://github.com/pal-robotics/realsense_gazebo_plugin and tweak the values to match the d435i-->
        <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_controller">
          <cameraName>camera</cameraName>
          <alwaysOn>true</alwaysOn>
          <updateRate>60</updateRate>
          <pointCloudCutoff>0.2</pointCloudCutoff>
          <pointCloudCutoffMax>10</pointCloudCutoffMax>
          <imageTopicName>color/image_raw</imageTopicName>
          <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
          <!-- This topic matches the realsense, despite sounding rectified I don't think it is, do rectify in camera info was false on realsense-->
          <depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <frameName>realsense_cam_link</frameName>
          <distortion_k1>0.0</distortion_k1>
          <distortion_k2>0.0</distortion_k2>
          <distortion_k3>0.0</distortion_k3>
          <distortion_t1>0.0</distortion_t1>
          <distortion_t2>0.0</distortion_t2>
        </plugin>
      </sensor>
    </link>
  </model>

    <joint name="depth_camera_joint_foward" type="revolute">
      <child>realsense_cam::link</child>
      <parent>px4ir::base_link</parent>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <upper>0</upper>
          <lower>0</lower>
        </limit>
      </axis>
    </joint>

  <model name="terabee_cam">
      <pose>.05 0 -.05 0 1.57 0</pose>
    <link name="link">
      <inertial>
        <pose>0.01 0.025 0.025 0 0 0</pose>
        <mass>0.01</mass>
        <inertia>
          <ixx>4.15e-6</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>2.407e-6</iyy>
          <iyz>0</iyz>
          <izz>2.407e-6</izz>
        </inertia>
      </inertial>
      <visual name="visual">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          <mesh>
            <uri>model://realsense_camera/meshes/realsense.dae</uri>
          </mesh>
        </geometry>
      </visual>
      <sensor name="depth_camera" type="depth">
        <update_rate>20</update_rate>
        <camera>
          <!-- 15 degree fov in radians-->
          <horizontal_fov>0.261799</horizontal_fov>
          <image>
            <!-- Keep This Square since TB output is square-->
            <format>R8G8B8</format>
            <width>80</width>
            <height>80</height>
          </image>
          <clip>
            <!--Close Range Mode has an actual min of .1, but the sensor doesn't behave right when landed -->
            <near>0.001</near>
            <far>5</far>
          </clip>
        </camera>
        <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_controller">
          <cameraName>teraranger_evo_64px</cameraName>
          <alwaysOn>true</alwaysOn>
          <updateRate>20</updateRate>
          <pointCloudCutoff>0.001</pointCloudCutoff>
          <pointCloudCutoffMax>10</pointCloudCutoffMax>
          <!-- The actual terabee only has a point cloud and a depth image -->
          <imageTopicName>rgb/image_raw</imageTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/depth_image</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/points_prefilt</pointCloudTopicName>
          <frameName>terabee_cam_link</frameName>
          <distortion_k1>0.0</distortion_k1>
          <distortion_k2>0.0</distortion_k2>
          <distortion_k3>0.0</distortion_k3>
          <distortion_t1>0.0</distortion_t1>
          <distortion_t2>0.0</distortion_t2>
        </plugin>
      </sensor>
    </link>
  </model>

    <joint name="depth_camera_joint_down" type="revolute">
      <child>terabee_cam::link</child>
      <parent>px4ir::base_link</parent>
      <axis>
        <xyz>0 0 1</xyz>
        <limit>
          <upper>0</upper>
          <lower>0</lower>
        </limit>
      </axis>
    </joint>
  </model>
</sdf>
